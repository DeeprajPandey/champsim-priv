/*
 * Implementation of Dead Block Correlating Prefetcher - Lai, Fide, Falsafi
 * Reuel Johm and Deepraj Pandey
 *
 * 28 April, 2020
 */

#include <map>
#include <vector>
#include "cache.h"
#include "ooo_cpu.h"

using namespace std;

uint64_t get_new_signature(uint64_t, uint64_t);
void insert_to_hist(uint64_t, uint64_t);
void printmap();
void printvec(vector<uint64_t>);

// hist_table - block_addr: [PC1, PC2, PC3...]
map<uint64_t, vector<uint64_t>> hist_table;
// db_table - signature: []

void CACHE::l1d_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L1D DBCP prefetcher" << endl;
    cout << this->NAME << endl;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
    uint64_t tag = addr >> LOG2_BLOCK_SIZE;
    // update history table
    insert_to_hist(tag, ip);
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    uint64_t tag_evict = evicted_addr >> LOG2_BLOCK_SIZE;
    // cout << this->block[set][way].tag << "\t" << blocknum << endl;
    // this block is now invalidated, move to db correlation table
    insert_to_db_corr(tag_evict, placeholder);
}

void CACHE::l1d_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1D DBCP final stats" << endl;
}


//======== Helper Functions ========//
// an implementation of cantor pairing which we use as one of the
// encoding algorithms
// TODO: use bitshifting to do the arithmetic operations
uint64_t cantor_encoding(uint64_t old_sig, uint64_t pc_2)
{
    uint64_t signature = (old_sig + pc_2);
    signature *= (signature+1);
    signature*=0.5;
    signature+=pc_2;
    return signature;
}

// add new_pc to some element in the history table
// if tag doesn't exist, it will place new_pc there
// else, it will add new+pc to the existing trace encoding
void insert_to_hist(uint64_t tag, uint64_t new_pc)
{
    map<uint64_t, uint64_t>::iterator itr = hist_table.find(id);
    // if we found the element and iterator hasn't reached the end
    if (itr != hist_table.end()) {
        hist_table[tag] = cantor_encoding(hist_table[tag], new_pc);
    }
    else {
        hist_table[tag] = new_pc;
    }
}

void print_hist_table()
{
    for (auto i = hist_table.begin(); i != hist_table.end(); i++) {
        cout << "map: " << i->first << "\t";
        printvec(i->second);
    }
    cout << endl;
}

void printvec(vector<uint64_t> inp)
{
    for (auto i = inp.begin(); i != inp.end(); i++) {
        cout << *i << " ";
    }
    cout << endl << endl;
}
